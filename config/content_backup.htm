<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站：<a href="https://mdecd2025.github.io/hw-Manto8/"> https://mdecd2025.github.io/hw-Manto8/</a></p>
<p>學員作業倉儲：<a href="https://github.com/mdecd2025/hw-Manto8/settings/pages">https://github.com/mdecd2025/hw-Manto8/settings/pages</a></p>
<p>組別作業倉儲：<a href="https://github.com/mdecd2025/2a-ag5">https://github.com/mdecd2025/2a-ag5</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>List</h1>
<h1>Week</h1>
<h2>w1</h2>
<p><span>心得：上個禮拜班上多了幾位重補修的學長姊，所以老師從基本的建立個人網站及倉儲開始教起。</span></p>
<h2>w3</h2>
<p>列出各班未納入分組名單的名單</p>
<p><a href="https://mdecd2025.github.io/2a-ag4/content/Brython.html?src=https://gist.githubusercontent.com/zhe41223118/fcdf65c3206155c5cd56140e47c6c87d/raw/8a5262e66228212fbc4f862ceaf67c798c9fb54c/2a-1">2a未加入團隊學員</a></p>
<p><a href="https://mdecd2025.github.io/2a-ag4/content/Brython.html?src=https://gist.githubusercontent.com/zhe41223118/fcdf65c3206155c5cd56140e47c6c87d/raw/8a5262e66228212fbc4f862ceaf67c798c9fb54c/2a-1">列出2a還未納入的學員名單</a></p>
<h2>w4</h2>
<p><span>putty的使用方法、fossil的操作方式</span></p>
<h2>w5</h2>
<p><em>問題：請用繁體中文詳細說明資料</em></p>
<div>
<p><strong>什麼是 Webots？</strong></p>
<p class="break-words">Webots 是一款專業的開源移動機器人仿真軟件，由 Cyberbotics 公司開發。它提供了一個快速原型設計環境，讓使用者可以在虛擬的 3D 空間中創建具有物理特性的機器人及其環境。Webots 最初由瑞士洛桑聯邦理工學院（EPFL）開發，後於 2018 年 12 月起以 Apache 2.0 許可證開源，廣泛應用於教育、研究和工業領域。它的核心基於開源物理引擎 ODE（Open Dynamics Engine）和 OpenGL 技術，支持 Windows、Linux 和 macOS 操作系統，並兼容多種編程語言，包括 C、C++、Python、Java 和 MATLAB。</p>
<p class="break-words">簡單來說，Webots 是一個強大的工具，用於模擬機器人的行為、測試控制算法，並在虛擬環境中驗證設計，而無需直接使用實體機器人。</p>
<hr/>
<p><strong>我可以用 Webots 做什麼？</strong></p>
<p class="break-words">Webots 的功能非常豐富，以下是一些主要用途：</p>
<ol class="marker:text-secondary">
<li class="break-words"><strong>機器人設計與建模</strong>：
<ul class="marker:text-secondary">
<li class="break-words">使用內建的 3D 編輯器創建機器人模型，或導入外部 CAD 文件（如 Blender 或 URDF 格式）。</li>
<li class="break-words">設定機器人的物理屬性，例如質量、摩擦力、關節等。</li>
</ul>
</li>
<li class="break-words"><strong>仿真與測試</strong>：
<ul class="marker:text-secondary">
<li class="break-words">模擬機器人在不同環境中的行為，如輪式機器人、腿式機器人或飛行機器人。</li>
<li class="break-words">測試各種傳感器（如距離傳感器、攝影機、陀螺儀）和執行器（如馬達、驅動輪）的運作。</li>
</ul>
</li>
<li class="break-words"><strong>控制算法開發</strong>：
<ul class="marker:text-secondary">
<li class="break-words">編寫控制器程式，讓機器人執行特定任務，例如避障、巡線或協作。</li>
<li class="break-words">支持多種編程語言，適合不同技術背景的使用者。</li>
</ul>
</li>
<li class="break-words"><strong>教育與研究</strong>：
<ul class="marker:text-secondary">
<li class="break-words">用於機器人學課程，教授運動學、動力學和人工智能等概念。</li>
<li class="break-words">研究多智能體系統（如群體智慧）或自適應行為（如神經網絡、遺傳算法）。</li>
</ul>
</li>
<li class="break-words"><strong>真實機器人接口</strong>：
<ul class="marker:text-secondary">
<li class="break-words">將模擬結果轉移到真實機器人（如 e-puck、Nao、DARwIn-OP），實現虛實結合。</li>
</ul>
</li>
<li class="break-words"><strong>比賽與原型開發</strong>：
<ul class="marker:text-secondary">
<li class="break-words">參與機器人競賽（如 Robotstadium）或快速開發機器人原型，應用於汽車、航空航天或消費品行業。</li>
</ul>
</li>
</ol>
<p class="break-words">總之，Webots 適合用來模擬、驗證和優化機器人系統，無論是單一機器人還是多機器人協作場景。</p>
<hr/><strong>使用 Webots 需要知道什麼？</strong>
<p class="break-words">要有效使用 Webots，您需要掌握以下知識和技能：</p>
<ol class="marker:text-secondary">
<li class="break-words"><strong>基本電腦操作</strong>：
<ul class="marker:text-secondary">
<li class="break-words">熟悉 Windows、Linux 或 macOS 操作系統的基本使用。</li>
<li class="break-words">確保您的電腦符合最低硬體要求：雙核 CPU（建議四核）、2GB RAM（建議更多）、支援 OpenGL 3.3 的顯卡（推薦 NVIDIA 或 AMD）。</li>
</ul>
</li>
<li class="break-words"><strong>編程基礎</strong>：
<ul class="marker:text-secondary">
<li class="break-words">熟悉至少一種 Webots 支持的語言：C、C++、Python、Java 或 MATLAB。</li>
<li class="break-words">理解基本的程式設計概念，如變數、迴圈、條件語句等。</li>
</ul>
</li>
<li class="break-words"><strong>機器人學概念</strong>：
<ul class="marker:text-secondary">
<li class="break-words">了解機器人的基本組成，例如傳感器、執行器和控制器。</li>
<li class="break-words">對物理模擬（如質量、摩擦力、碰撞檢測）有初步認識。</li>
</ul>
</li>
<li class="break-words"><strong>Webots 介面與功能</strong>：
<ul class="marker:text-secondary">
<li class="break-words">學習 Webots 的圖形介面，包括場景樹（Scene Tree）、3D 視圖和文字編輯器。</li>
<li class="break-words">熟悉如何創建「世界」（World）、添加物件和機器人，以及編寫控制器。</li>
</ul>
</li>
<li class="break-words"><strong>官方資源</strong>：
<ul class="marker:text-secondary">
<li class="break-words">閱讀 Webots 的《用戶指南》（User Guide）和《參考手冊》（Reference Manual），這兩個文件提供了詳細的操作說明和 API 介紹。</li>
<li class="break-words">使用內建的教學範例（Tutorials）逐步學習。</li>
</ul>
</li>
</ol>
<p class="break-words">初學者可以從簡單的任務開始，例如讓一個輪式機器人移動，然後逐步進階到更複雜的應用。</p>
<hr/><strong>如何獲得 Webots 的用戶支持？</strong>
<p class="break-words">Webots 提供了多種用戶支持管道：</p>
<ol class="marker:text-secondary">
<li class="break-words"><strong>官方文件</strong>：
<ul class="marker:text-secondary">
<li class="break-words">《用戶指南》和《參考手冊》可在 Webots 官網（<a href="https://cyberbotics.com%EF%BC%89%E6%88%96%E8%BB%9F%E4%BB%B6%E5%85%A7%E7%8D%B2%E5%8F%96%EF%BC%8C%E6%8F%90%E4%BE%9B%E5%85%A8%E9%9D%A2%E7%9A%84%E6%93%8D%E4%BD%9C%E5%92%8C" rel="noopener noreferrer" target="_blank">https://cyberbotics.com）或軟件內獲取，提供全面的操作和</a> API 說明。</li>
</ul>
</li>
<li class="break-words"><strong>社區支持</strong>：
<ul class="marker:text-secondary">
<li class="break-words"><strong>GitHub 討論區</strong>：Webots 的開源代碼托管於 GitHub（<a href="https://github.com/cyberbotics/webots%EF%BC%89%EF%BC%8C%E6%82%A8%E5%8F%AF%E4%BB%A5%E5%9C%A8%E3%80%8CDiscussions%E3%80%8D%E5%8D%80%E5%9F%9F%E6%8F%90%E5%95%8F%E6%88%96%E6%90%9C%E7%B4%A2%E8%A7%A3%E7%AD%94%E3%80%82" rel="noopener noreferrer" target="_blank">https://github.com/cyberbotics/webots），您可以在「Discussions」區域提問或搜索解答。</a></li>
<li class="break-words"><strong>論壇與社群</strong>：加入 Webots 的 Discord 伺服器或相關機器人學社群，與其他使用者交流。</li>
</ul>
</li>
<li class="break-words"><strong>技術支持</strong>：
<ul class="marker:text-secondary">
<li class="break-words">如果您是付費用戶（Webots 有商業版本），可以通過 Cyberbotics 的官方郵箱（<a href="mailto:support@cyberbotics.com" rel="noopener noreferrer" target="_blank">support@cyberbotics.com</a>）獲得專業支持。</li>
<li class="break-words">開源版本主要依賴社區自助，但問題通常也能在 GitHub 上得到回應。</li>
</ul>
</li>
<li class="break-words"><strong>教學資源</strong>：
<ul class="marker:text-secondary">
<li class="break-words">Webots 內建「導覽之旅」（Guided Tour），展示範例世界和功能。</li>
<li class="break-words">B 站或 YouTube 上有許多中文和英文教學影片，例如「Webots 超詳細入門教程」。</li>
</ul>
</li>
</ol>
<p class="break-words">建議先查閱官方文件和範例，若無法解決問題，再向社區或官方求助。</p>
<hr/><strong>Webots 仿真中的「世界」（World）是什麼？</strong>
<p class="break-words">在 Webots 中，「世界」（World）是指機器人及其環境的 3D 虛擬描述。它是一個完整的仿真場景，包含以下元素：</p>
<ul class="marker:text-secondary">
<li class="break-words"><strong>物件描述</strong>：每個物件的位置、方向、幾何形狀、外觀（如顏色、紋理）和物理屬性（如質量、摩擦係數）。</li>
<li class="break-words"><strong>層次結構</strong>：世界以樹狀結構組織（基於 VRML97 格式），物件可包含子物件，例如一個機器人可能包含輪子、傳感器和關節。</li>
<li class="break-words"><strong>文件格式</strong>：世界儲存在 <span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">.wbt</span> 文件中，通常位於 Webots 項目的 <span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">worlds</span> 子目錄。</li>
</ul>
<p class="break-words">世界文件不包含機器人的控制器程式，只指定每個機器人使用的控制器名稱。它定義了仿真的環境和初始條件，例如地面、地形、光線和障礙物。</p>
<hr/><strong>Webots 中的「控制器」（Controller）是什麼？</strong>
<p class="break-words">「控制器」（Controller）是控制 Webots 中機器人行為的程式。它負責：</p>
<ul class="marker:text-secondary">
<li class="break-words"><strong>讀取傳感器數據</strong>：如距離傳感器或攝影機的輸入。</li>
<li class="break-words"><strong>執行邏輯運算</strong>：根據數據計算機器人的動作。</li>
<li class="break-words"><strong>發送指令</strong>：控制執行器，例如讓馬達轉動或輪子移動。</li>
</ul>
<p class="break-words"><strong>特性</strong>：</p>
<ul class="marker:text-secondary">
<li class="break-words"><strong>編程語言</strong>：可用 C、C++、Java、Python 或 MATLAB 編寫。</li>
<li class="break-words"><strong>獨立進程</strong>：每個控制器作為 Webots 的子進程運行，不與主程式共享記憶體，可在不同 CPU 核心上執行。</li>
<li class="break-words"><strong>儲存位置</strong>：控制器源文件和編譯後的文件位於項目的 <span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">controllers</span> 子目錄。</li>
</ul>
<p class="break-words">例如，一個簡單的控制器可能讓機器人檢測障礙物並轉向避開。同一控制器程式可被多個機器人共用，但每個機器人會啟動獨立的進程。</p>
<hr/><strong>Webots 中的「監督控制器」（Supervisor Controller）是什麼？</strong>
<p class="break-words">「監督控制器」（Supervisor Controller）是一種特殊類型的控制器，具有更高的權限，用於管理和控制整個仿真環境。它的特點包括：</p>
<ul class="marker:text-secondary">
<li class="break-words"><strong>特權操作</strong>：普通控制器只能控制機器人本身，而監督控制器可以執行以下操作：
<ul class="marker:text-secondary">
<li class="break-words">移動機器人到指定位置。</li>
<li class="break-words">更改仿真環境（如添加或移除物件）。</li>
<li class="break-words">控制仿真流程（如暫停、重啟或錄製影片）。</li>
</ul>
</li>
<li class="break-words"><strong>啟用方式</strong>：在場景樹中，將機器人的 <span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">supervisor</span> 欄位設為 <span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">TRUE</span>，該機器人即可使用監督控制器。</li>
<li class="break-words"><strong>編程語言</strong>：與普通控制器相同，支持 C、C++、Python 等。</li>
</ul>
<p class="break-words"><strong>應用場景</strong>：</p>
<ul class="marker:text-secondary">
<li class="break-words">在多機器人仿真中，監督控制器可用來協調各機器人的行為。</li>
<li class="break-words">用於測試或調試，例如隨機放置障礙物或記錄機器人軌跡。</li>
</ul>
<p class="break-words">例如，一個監督控制器可能監控所有機器人的位置，並在某個機器人偏離路徑時將其重置。</p>
<h2>w6</h2>
<p>要啟動webots在可攜裡面輸入<span>webotsw</span>就可以開啟軟體，前提是要檔案內要<a href="https://mdecd2025.github.io/hw-41223136/downloads/Webots_2025a_web.7z">Webots_2025a_web.7z</a>才可以開啟，並放在data頁面，如果是舊版可攜套件<span>也可在.bat啟動編碼中自行設定加入</span></p>
<div>
<div class="syntaxhighlighter py" id="highlighter_242194">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py plain">REM </code><code class="py keyword">for</code> <code class="py plain">Webots</code></div>
<div class="line number2 index1 alt1"><code class="py functions">set</code> <code class="py plain">PYTHON_PATH</code><code class="py keyword">=</code><code class="py keyword">%</code><code class="py plain">Disk</code><code class="py keyword">%</code><code class="py plain">:\Python313</code></div>
<div class="line number3 index2 alt2"><code class="py spaces">  </code> </div>
<div class="line number4 index3 alt1"><code class="py plain">REM </code><code class="py keyword">for</code> <code class="py plain">webots</code></div>
<div class="line number5 index4 alt2"><code class="py functions">set</code>  <code class="py plain">path_webots</code><code class="py keyword">=</code><code class="py keyword">%</code><code class="py plain">Disk</code><code class="py keyword">%</code><code class="py plain">:\Webots_2025a\msys64\mingw64\</code><code class="py functions">bin</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">Disk</code><code class="py keyword">%</code><code class="py plain">:\Webots_2025a\msys64\usr\</code><code class="py functions">bin</code></div>
<div class="line number6 index5 alt1"><code class="py spaces">  </code> </div>
<div class="line number7 index6 alt2"><code class="py plain">path</code><code class="py keyword">=</code><code class="py keyword">%</code><code class="py plain">Disk</code><code class="py keyword">%</code><code class="py plain">:;</code><code class="py keyword">%</code><code class="py plain">path_python</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_git</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_copsim</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_msys2</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_miketex</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_flutter</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_node</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_tcc</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_postgresql</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_range</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_lua</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_core</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_putty</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_vscode</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">RUST_PATH</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_erlang</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_nodejs</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_haskell</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_scite</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_xsltproc</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_gnuplot</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_openssl</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_poppler</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_webots</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path_blender</code><code class="py keyword">%</code><code class="py plain">;</code><code class="py keyword">%</code><code class="py plain">path</code><code class="py keyword">%</code><code class="py plain">;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><span>在開啟webots時系統會有跳出警告防火牆，其中一定要選擇允許，否則防火牆會擋</span></p>
<h2>w8</h2>
<p>複習webots<span> </span><a href="https://cyberbotics.com/doc/reference/solidreference">SolidReference</a><span> 節點的用法說明，用在 Joint 節點的 endPoint 欄位中，用來指向一個現有的 Solid 或靜態環境 &lt;static environment&gt;。通過這種方式，可以閉合機械迴圈。</span></p>
<p><span>當指向一個 Solid 時，唯一的限制是 Solid 和 Joint 必須是某個共同上層 Solid 的下層。</span></p>
<p>意思即是指 SolidReference 是一個引用類型，允許在 Joint 節點的 endPoint 欄位中指定某個目標。</p>
<h2>w10</h2>
<p>已知Webots2025a有bug，無法使用<span>Transform 節點和閃退的問題，因此可以下載<a href="http://229.cycu.org/Webots_2023b.7z">Webots2023b</a>版本。</span></p>
<p><span>若想要擁有2025a的版本和2023b的版本可以在編輯器內將2025a的文字更改為2023b，並另存新檔即可。</span></p>
<h2>w11</h2>
<p><span>webots小組協同模擬及 fourbar_box複習</span></p>
<h2>w12</h2>
<p><span>本週開始需依照team上，在規定時間完成對應的HW、Exam等網頁內容，並在規定時間內完成表單填寫。</span></p>
<h2>w16</h2>
<p>檔案：<a href="/downloads/HW1-w16.zip">/downloads/HW1-w16.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/I6XOCr0klbU" width="560"></iframe></p>
<p>心得：使用HW1做變換將紅色改為20公分、藍色改為80公分、綠色改為45公分，利用solvespace觀察改變後的角度變化，並將Webots原有的角度數值做更改，最後再將馬達的程式輸入並存檔，四連桿即可作動。</p><h1>task</h1>
<h2>task2</h2>
<p>ssh</p>
<p>1.利用puttygen.exe建立金鑰，複製ssh-ra到Github，之後到按Load存入Y槽</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ew5n7qKC6iM" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/C5BnLaKFfis" width="560"></iframe></p>
<h2>task3</h2>
<p>檔案：<a href="/downloads/solvespace.7z">/downloads/solvespace.7z</a></p>
<p>四連桿1-3</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/egwLfsM6HUY" width="560"></iframe></p>
<p><span>四連桿4</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/FMh1G81ThwM" width="560"></iframe></span></p>
<p><span>四連桿5-7</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/iX7Kbj2VfjM" width="560"></iframe></span></p>
<p><span>四連桿組合</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/dPjOHEufJdE" width="560"></iframe></span></p>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 吳柏諺-41223117</p>
<p>檔案：<a href="/get_page/HW1/41223117-downloads/HW1.7z">41223117-downloads/HW1.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/QsItjp8pJak" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ij04kG51VFE" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/gASvc4lON3A" width="560"></iframe></p>
<h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 吳柏諺-41223117</p>
<p>檔案：<a href="/downloads/41223117_HW2.7z">/downloads/41223117_HW2.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/brNrvjaOJYo" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/OBUVa4EbGXs" width="560"></iframe></p>
<p></p>
<h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 吳柏諺-41223117</p>
<p>檔案：<a href="/downloads/basketball_game.zip">/downloads/basketball_game.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Bou8tXyTM4I" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/4LfvT2uuL8A" width="560"></iframe></p>
<p></p><h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:</p>
<p>各週網頁內容:</p>
<p>期中心得:</p>
<p>期中自評影片:</p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 -吳柏諺-41223117</p>
<p>檔案：<a href="/downloads/HW1.7z.zip">41223117-downloads/EX1.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/b66AyRkT2l0" width="560"></iframe></p>
<p>註解：先利用solvespace畫圖知道各個節點的角度，之後用作業一進行修改並加入<span>transform即可完成。</span></p>
<h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 吳柏諺-41223117</p>
<p>檔案：<a href="/downloads/41223117_Exam2.7z">/downloads/41223117_Exam2.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/WrNmUcN3gPw" width="560"></iframe></p>
<p>註解：Exam2為HW2的延伸，其中最大的差別就在於<span>連桿短桿需用自己的學號設計</span>，了解如何將結點和角度進行修改就會非常簡單。</p>
<h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 吳柏諺-41223117</p>
<p>檔案：<a href="/downloads/41223117-Exam3.zip">/downloads/41223117-Exam3.zip</a></p>
<p>伺服端：</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/1lZvm3H0APw" width="560"></iframe></p>
<p>七段顯示器：</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/g5wbXDv7y5c" width="560"></iframe></p>
<p>控制平台車：</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9afIWoYZESI" width="560"></iframe></p><h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<p><span style="background-color: #ff00ff;">投球數量限制:</span></p>
<p><span style="background-color: #ff00ff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/qRCRTVoCjM0" width="560"></iframe></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Supervisor, Keyboard
import time
import random
import numpy as np
import re
 
# ----------------- 參數區 -----------------
HOOP_CENTER = [0.622, -0.103, 0.742838]
BALL_DEF_PATTERN = re.compile(r"Sphere_\d+")
supervisor = Supervisor()
timestep = int(supervisor.getBasicTimeStep())
keyboard = Keyboard()
keyboard.enable(timestep)
 
sphere_radius = 0.1
TRAJECTORY_POINT_RADIUS = 0.03
TRAJECTORY_POINT_STEP = 0.12
TRAJECTORY_MAX_POINTS = 5
 
waiting_ball_def = None
waiting_ball_info = None
last_key_time = 0
debounce_time = 0.5
default_feed_pos = (-0.35, 0.0, 0.9)
PRINT_INTERVAL = 0.2
 
current_tracked_def = None
last_print_time = time.time()
 
trajectory_points = []
 
# 新增球數上限與計數
max_balls = 8
balls_created = 0
 
def axis_angle_to_rotation_matrix(axis, angle):
    x, y, z = axis
    c = np.cos(angle)
    s = np.sin(angle)
    C = 1 - c
    return np.array([
        [x*x*C + c,   x*y*C - z*s, x*z*C + y*s],
        [y*x*C + z*s, y*y*C + c,   y*z*C - x*s],
        [z*x*C - y*s, z*y*C + x*s, z*z*C + c]
    ])
 
def generate_valid_def_name(base_name="Sphere"):
    timestamp = int(supervisor.getTime() * 1000)
    return f"{base_name}_{timestamp}_{random.randint(0, 10000)}"
 
def generate_random_color():
    return random.random(), random.random(), random.random()
 
def youbot_local_to_world(local_pos):
    youbot_node = supervisor.getFromDef('youbot')
    if youbot_node is None:
        raise RuntimeError("找不到 DEF 為 youbot 的 Robot 物件")
    youbot_translation = np.array(youbot_node.getField('translation').getSFVec3f())
    youbot_rotation = youbot_node.getField('rotation').getSFRotation()
    youbot_axis = youbot_rotation[:3]
    youbot_angle = youbot_rotation[3]
    youbot_rot_mat = axis_angle_to_rotation_matrix(youbot_axis, youbot_angle)
    rotated = youbot_rot_mat @ np.array(local_pos)
    world_pos = youbot_translation + rotated
    return tuple(world_pos)
 
def create_static_ball(def_name, world_pos, r, g, b):
    sphere_string = f"""
    DEF {def_name} Solid {{
      translation {world_pos[0]} {world_pos[1]} {world_pos[2]}
      contactMaterial "ball"
      children [
        Shape {{
          geometry Sphere {{
            radius {sphere_radius}
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor {r} {g} {b}
            }}
          }}
        }}
      ]
      boundingObject Sphere {{
        radius {sphere_radius}
      }}
    }}
    """
    root = supervisor.getRoot()
    children_field = root.getField("children")
    children_field.importMFNodeFromString(-1, sphere_string)
 
def create_dynamic_ball(def_name, world_pos, r, g, b):
    sphere_string = f"""
    DEF {def_name} Solid {{
      translation {world_pos[0]} {world_pos[1]} {world_pos[2]}
      contactMaterial "ball"
      children [
        Shape {{
          geometry Sphere {{
            radius {sphere_radius}
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor {r} {g} {b}
            }}
          }}
        }}
      ]
      boundingObject Sphere {{
        radius {sphere_radius}
      }}
      physics Physics {{
        mass 0.01
        density -1
      }}
    }}
    """
    root = supervisor.getRoot()
    children_field = root.getField("children")
    children_field.importMFNodeFromString(-1, sphere_string)
 
def create_trajectory_point(pos):
    def_name = generate_valid_def_name("TrajectoryPt")
    sphere_string = f"""
    DEF {def_name} Transform {{
      translation {pos[0]} {pos[1]} {pos[2]}
      children [
        Shape {{
          geometry Sphere {{
            radius {TRAJECTORY_POINT_RADIUS}
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor 1 0.7 0
              transparency 0.3
            }}
          }}
        }}
      ]
    }}
    """
    root = supervisor.getRoot()
    children_field = root.getField("children")
    children_field.importMFNodeFromString(-1, sphere_string)
    return def_name
 
def delete_trajectory_points():
    global trajectory_points
    for _, def_name in trajectory_points:
        node = supervisor.getFromDef(def_name)
        if node:
            node.remove()
    trajectory_points.clear()
 
def create_static_sphere(supervisor, x, y, z):
    global waiting_ball_def, waiting_ball_info
    def_name = generate_valid_def_name()
    waiting_ball_def = def_name
    r, g, b = generate_random_color()
    world_pos = youbot_local_to_world((x, y, z))
    waiting_ball_info = (world_pos, r, g, b)
    create_static_ball(def_name, world_pos, r, g, b)
 
def activate_dynamic_ball():
    global waiting_ball_def, waiting_ball_info
    if waiting_ball_def is None or waiting_ball_info is None:
        return
    ball_node = supervisor.getFromDef(waiting_ball_def)
    if ball_node is not None:
        ball_node.remove()
        supervisor.step(int(supervisor.getBasicTimeStep()))
    world_pos, r, g, b = waiting_ball_info
    create_dynamic_ball(waiting_ball_def, world_pos, r, g, b)
    waiting_ball_def = None
    waiting_ball_info = None
 
def is_ball_landed(pos, threshold_z=0.13):
    return pos[2] &lt; threshold_z
 
print("按 F 產生一顆靜止球，按 M 讓球變 dynamic 可擊出（最多只有5個軌跡點跟著球跑，球落地後軌跡自動消失）")
 
while supervisor.step(timestep) != -1:
    key = keyboard.getKey()
    current_time = time.time()
 
    if key == ord('F') and (current_time - last_key_time &gt;= debounce_time):
        if balls_created &gt;= max_balls:
            print("遊戲結束，已生成10顆球，不可再產生新球。")
        elif waiting_ball_def is None:
            create_static_sphere(supervisor, *default_feed_pos)
            current_tracked_def = waiting_ball_def
            delete_trajectory_points()
            balls_created += 1
        else:
            print("還有一顆球等待擊出，請先擊出再產生新球。")
        last_key_time = current_time
 
    if key == ord('M') and (current_time - last_key_time &gt;= debounce_time):
        activate_dynamic_ball()
        last_key_time = current_time
 
    if current_tracked_def is not None:
        ball_node = supervisor.getFromDef(current_tracked_def)
        if ball_node is not None:
            pos = ball_node.getPosition()
            if current_time - last_print_time &gt;= PRINT_INTERVAL:
                #print(f"球 {current_tracked_def} 絕對座標: [{pos[0]:.4f}, {pos[1]:.4f}, {pos[2]:.4f}]")
                last_print_time = current_time
            if (not trajectory_points) or np.linalg.norm(np.array(pos) - np.array(trajectory_points[-1][0])) &gt; TRAJECTORY_POINT_STEP:
                def_name = create_trajectory_point(pos)
                trajectory_points.append((pos, def_name))
                if len(trajectory_points) &gt; TRAJECTORY_MAX_POINTS:
                    _, old_def = trajectory_points.pop(0)
                    node = supervisor.getFromDef(old_def)
                    if node:
                        node.remove()
            if is_ball_landed(pos):
                delete_trajectory_points()
        else:
            delete_trajectory_points()
            current_tracked_def = None</pre>
<p><span style="background-color: #ff00ff;">投球機構自動賦歸:</span></p>
<p><span style="background-color: #ff00ff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/qRCRTVoCjM0" width="560"></iframe></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot, Keyboard
import time  # 為了賦歸計時
 
# === 常數定義 ===
TIME_STEP = 32
MAX_VELOCITY = 10.0
ANGLE_STEP = 40 * 3.14159 / 180  # 40 度轉為弧度
POSITION_M = ANGLE_STEP          # 升起位置 (+40°)
POSITION_K = 0.0                 # 回復位置 (0°)
 
# === 初始化 Webots 裝置 ===
robot = Robot()
timestep = int(robot.getBasicTimeStep())
 
keyboard = Keyboard()
keyboard.enable(timestep)
 
# === 嘗試取得馬達與感測器 ===
try:
    motor = robot.getDevice('motor1')
    sensor = robot.getDevice('motor1_sensor')
    sensor.enable(timestep)
    mechanism_enabled = True
except Exception:
    mechanism_enabled = False
 
# === 嘗試取得輪子裝置 ===
try:
    wheels = [robot.getDevice(f"wheel{i+1}") for i in range(4)]
    for wheel in wheels:
        wheel.setPosition(float('inf'))  # 啟用速度模式
        wheel.setVelocity(0)             # 初始速度為 0
    platform_enabled = True
except Exception:
    platform_enabled = False
 
# === 初始提示 ===
print("使用方向鍵控制平台移動：↑ 前進，↓ 後退，← 左轉，→ 右轉")
print("按 M 可升起機構，將於 1 秒後自動回復")
print("按 Q 離開程式")
 
# === 馬達控制狀態 ===
key_pressed = {'m': False}
mechanism_raised = False       # 是否目前為升起狀態
raise_start_time = None        # 升起開始時間（記錄用）
 
# === 主控制迴圈 ===
while robot.step(timestep) != -1:
    key = keyboard.getKey()
    current_time = time.time()
 
    # === 四輪平台移動控制 ===
    if platform_enabled:
        if key == Keyboard.UP:
            for wheel in wheels:
                wheel.setVelocity(MAX_VELOCITY)
        elif key == Keyboard.DOWN:
            for wheel in wheels:
                wheel.setVelocity(-MAX_VELOCITY)
        elif key == Keyboard.LEFT:
            wheels[0].setVelocity(MAX_VELOCITY)
            wheels[1].setVelocity(-MAX_VELOCITY)
            wheels[2].setVelocity(MAX_VELOCITY)
            wheels[3].setVelocity(-MAX_VELOCITY)
        elif key == Keyboard.RIGHT:
            wheels[0].setVelocity(-MAX_VELOCITY)
            wheels[1].setVelocity(MAX_VELOCITY)
            wheels[2].setVelocity(-MAX_VELOCITY)
            wheels[3].setVelocity(MAX_VELOCITY)
        elif key == ord('Q') or key == ord('q'):
            print("離開程式...")
            break
        else:
            for wheel in wheels:
                wheel.setVelocity(0)
 
    # === 機構升起＋自動賦歸控制 ===
    if mechanism_enabled:
        motor_position = sensor.getValue()
 
        # 按下 M 鍵時觸發升起（且尚未升起）
        if key == ord('M') or key == ord('m'):
            if not key_pressed['m'] and not mechanism_raised:
                motor.setPosition(POSITION_M)
                print("投球")
                mechanism_raised = True
                raise_start_time = current_time
            key_pressed['m'] = True
        else:
            key_pressed['m'] = False
 
        # 已升起 → 檢查是否超過1秒 → 回復
        if mechanism_raised and raise_start_time is not None:
            if current_time - raise_start_time &gt;= 1.0:
                motor.setPosition(POSITION_K)
                print("自動回復")
                mechanism_raised = False
                raise_start_time = None</pre>
<p><span style="background-color: #ff00ff;">籃框隨機移動和感測器角度調整:</span></p>
<p><span style="background-color: #ff00ff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ABK-A6Oft1g" width="560"></iframe></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot
import random
 
# === 常數 ===
MAX_VELOCITY = 10.0
MOVE_DURATION = 1.5
DISTANCE_THRESHOLD = 0.17
SCORE_INTERVAL = 1.0  # 避免連續得分
 
# === 初始化 ===
robot = Robot()
timestep = int(robot.getBasicTimeStep())
emitter = robot.getDevice("score_emitter")
score_to_send = 2
sensor = robot.getDevice('sensor')
sensor.enable(timestep)
 
# === 馬達 ===
wheels = [robot.getDevice(f"wheel{i}") for i in range(5, 9)]
for w in wheels:
    w.setPosition(float('inf'))
    w.setVelocity(0)
 
def set_wheel_velocity(v1, v2, v3, v4):
    wheels[0].setVelocity(v1)
    wheels[1].setVelocity(v2)
    wheels[2].setVelocity(v3)
    wheels[3].setVelocity(v4)
 
# === AD轉距離對照表 ===
lookup_table = [
    (1000, 0.00), (620, 0.12), (372, 0.13),
    (248, 0.14), (186, 0.15), (0, 0.18)
]
 
def ad_to_distance(ad_value):
    for i in range(len(lookup_table) - 1):
        a0, d0 = lookup_table[i]
        a1, d1 = lookup_table[i + 1]
        if a1 &lt;= ad_value &lt;= a0:
            return d0 + (d1 - d0) * (ad_value - a0) / (a1 - a0)
    return lookup_table[0][1] if ad_value &gt; lookup_table[0][0] else lookup_table[-1][1]
 
# === 狀態 ===
score = 0
last_score_time = 0
is_moving = False
move_timer = 0
current_velocity = (0, 0, 0, 0)
last_time = robot.getTime()
 
print("⚙️ 初始靜止：當感測器感應到球時得分，然後才啟動隨機移動")
 
# === 主迴圈 ===
while robot.step(timestep) != -1:
    now = robot.getTime()
    dt = now - last_time
    last_time = now
 
    sensor_value = sensor.getValue()
    distance = ad_to_distance(sensor_value)
 
    if is_moving:
        set_wheel_velocity(*current_velocity)
        move_timer -= dt
        if move_timer &lt;= 0:
            # 移動時間結束，停止
            is_moving = False
            set_wheel_velocity(0, 0, 0, 0)
    else:
        set_wheel_velocity(0, 0, 0, 0)
        if distance &lt; DISTANCE_THRESHOLD and (now - last_score_time) &gt; SCORE_INTERVAL:
            # 得分並開始移動
            score += score_to_send
            print(f"🎯 得分！距離 {distance:.3f} m，總分：{score}")
            emitter.send(str(score_to_send).encode('utf-8'))
            last_score_time = now
 
            # 啟動隨機移動
            def rv(): return random.uniform(-MAX_VELOCITY, MAX_VELOCITY)
            current_velocity = (rv(), rv(), rv(), rv())
            move_timer = MOVE_DURATION
            is_moving = True</pre>
<p></p><h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
</div>